{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM1lI5mba5oEHf40R+LQp0i",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NicolasAlvess/etl_date_warehouse/blob/master/data_warehouse%20e%20data_Lake\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CWQLiD0BNCFX",
        "outputId": "9a8ee59d-e7f4-4205-b11f-ff99ca410482"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conteudo do Data warehouse:\n",
            "           data  produto_id  quantidade  valor_total         nome    categoria\n",
            "0    2024-04-05         457         197         3407  produto 457    Alimentos\n",
            "1    2024-04-13         457         177         3306  produto 457    Alimentos\n",
            "2    2024-04-26         457         130         6455  produto 457    Alimentos\n",
            "3    2024-04-25         139          59         9036  produto 139    Alimentos\n",
            "4    2024-04-07         139          98         1752  produto 139    Alimentos\n",
            "..          ...         ...         ...          ...          ...          ...\n",
            "995  2024-04-20         382         184         7689  produto 382  Eletrônicos\n",
            "996  2024-04-27         117         176         9965  produto 117    Alimentos\n",
            "997  2024-04-19         335          51         5918  produto 335  Eletrônicos\n",
            "998  2024-04-04         343         193         6756  produto 343       Roupas\n",
            "999  2024-04-08         102         109         8863  produto 102       Roupas\n",
            "\n",
            "[1000 rows x 6 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "#Aqui o codigo cria 600 produtos com id, nome e categoria.\n",
        "num_produtos = 600\n",
        "produtos = {\n",
        "    'produto_id': range(1, num_produtos + 1),\n",
        "    'nome': [f'produto {i}'for i in range(1, num_produtos + 1)],\n",
        "    'categoria': np.random.choice(['Eletrônicos', 'Roupas', 'Alimentos'], num_produtos)\n",
        "}\n",
        "\n",
        "#Cria um Data Frame do Pandas apartir de um dicionario ou lista de produtos.\n",
        "df_produtos = pd.DataFrame(produtos)\n",
        "\n",
        "#\n",
        "\n",
        "num_vendas = 1000 # Cria uma lista de 1000 \"vendas\"\n",
        "data_vendas = {\n",
        "    'data': np.random.choice(pd.date_range('2024-04-01', periods=30), num_vendas), #cria arrays com datas aleatorias iniciadas em 2024-04-01 e com 30 datas\n",
        "    'produto_id': np.random.randint(1, num_produtos + 1, num_vendas),\n",
        "    'quantidade': np.random.randint(50, 200, num_vendas), #\n",
        "    'valor_total': np.random.randint(1000, 10000, num_vendas) #\n",
        "}\n",
        "\n",
        "#\n",
        "df_vendas = pd.DataFrame(data_vendas)\n",
        "\n",
        "#\n",
        "df_vendas.to_csv('vendas.csv', index=False)\n",
        "df_produtos.to_csv('produtos.csv', index=False)\n",
        "\n",
        "#\n",
        "df_vendas = pd.read_csv('vendas.csv')\n",
        "df_produtos = pd.read_csv('produtos.csv')\n",
        "\n",
        "#\n",
        "df_merge = pd.merge(df_vendas, df_produtos, on ='produto_id', how='inner')\n",
        "\n",
        "#\n",
        "df_merge.to_csv('data_warehouse.csv', index=False)\n",
        "\n",
        "#\n",
        "df_warehouse = pd.read_csv('data_warehouse.csv')\n",
        "print(\"Conteudo do Data warehouse:\")\n",
        "print(df_warehouse)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# lê um arquivo CSV chamado 'data_warehouse.csv' e armazena seus dados em um DataFrame do Pandas chamado df_warehouse.\n",
        "df_warehouse = pd.read_csv('data_warehouse.csv')\n",
        "\n",
        "#Esse código agrupa os dados do DataFrame df_warehouse pela coluna 'nome' (que representa o nome do produto)\n",
        "# e depois calcula a soma das colunas 'quantidade' e 'valor_total' para cada produto. Em seguida,\n",
        "#ele exibe essa análise de vendas por produto, mostrando a quantidade total vendida e o valor total vendido para cada produto.\n",
        "vendas_por_produto = df_warehouse.groupby('nome')[['quantidade', 'valor_total']] .sum()\n",
        "print(\"Analise de vendas por produto:\")\n",
        "print(vendas_por_produto)\n",
        "\n",
        "#Esse código agrupa os dados no DataFrame df_warehouse pela categoria dos produtos e, em seguida, calcula a soma da quantidade e do valor total de vendas para cada categoria.\n",
        "#O resultado é armazenado na variável vendas_por_categoria e posteriormente exibido como uma análise de vendas por categoria de produto.\n",
        "vendas_por_categoria = df_warehouse.groupby('categoria')[['quantidade', 'valor_total']] .sum()\n",
        "print(\"\\nAnalise de vendas por categoria de produto produto:\")\n",
        "print(vendas_por_produto)\n",
        "\n",
        "#Esse código converte a coluna 'data' do DataFrame 'df_warehouse' em um formato de data e hora utilizando a função 'pd.to_datetime'.\n",
        "# Em seguida, ele agrupa o DataFrame por data e realiza a soma das colunas 'quantidade' e 'valor_total', criando um novo DataFrame com essas informações.\n",
        "#Por fim, imprime na tela a análise de tendências temporais com base nas vendas por data, mostrando a quantidade total vendida e o valor total das vendas para cada data.\n",
        "df_warehouse['data'] = pd.to_datetime(df_warehouse['data'])\n",
        "vendas_por_data = df_warehouse.groupby('data')[['quantidade', 'valor_total']] .sum()\n",
        "print(\"\\nAnalise de tendências temporais:\")\n",
        "print(vendas_por_data)\n",
        "\n",
        "#Esse código gera um gráfico de linha que mostra a quantidade de vendas ao longo do tempo.\n",
        "#Ele utiliza as datas como o eixo x e a quantidade vendida como o eixo y.\n",
        "plt.figure(figsize=(10, 5 ))\n",
        "plt.plot(vendas_por_data.index, vendas_por_data ['quantidade'], marker='o', linestyle='-')\n",
        "plt.title('vendas ao longo do tempo')\n",
        "plt.xlabel('data')\n",
        "plt.ylabel('quantidade vendida')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "#Esse código agrupa um DataFrame chamado df_warehouse pela coluna 'nome' e calcula a soma dos valores totais de cada produto.\n",
        "#Em seguida, exibe uma análise do desempenho de cada produto, mostrando a soma dos valores totais para cada um deles.\n",
        "desempenho_produto = df_warehouse.groupby('nome') ['valor_total'].sum()\n",
        "print(\"\\nAnalise de desempenho de produtos:\")\n",
        "print(desempenho_produto)"
      ],
      "metadata": {
        "id": "1jg6nNYQQX-w",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "f316c46d-2afc-4495-fb37-aa48a534032e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Analise de vendas por produto:\n",
            "             quantidade  valor_total\n",
            "nome                                \n",
            "produto 1           190        11389\n",
            "produto 10          220        16630\n",
            "produto 100         131         9992\n",
            "produto 101         527        19933\n",
            "produto 102         109         8863\n",
            "...                 ...          ...\n",
            "produto 93          360        10708\n",
            "produto 94          307        14144\n",
            "produto 96          524        15123\n",
            "produto 97          727        40728\n",
            "produto 99          250         7028\n",
            "\n",
            "[488 rows x 2 columns]\n",
            "\n",
            "Analise de vendas por categoria de produto produto:\n",
            "             quantidade  valor_total\n",
            "nome                                \n",
            "produto 1           190        11389\n",
            "produto 10          220        16630\n",
            "produto 100         131         9992\n",
            "produto 101         527        19933\n",
            "produto 102         109         8863\n",
            "...                 ...          ...\n",
            "produto 93          360        10708\n",
            "produto 94          307        14144\n",
            "produto 96          524        15123\n",
            "produto 97          727        40728\n",
            "produto 99          250         7028\n",
            "\n",
            "[488 rows x 2 columns]\n",
            "\n",
            "Analise de tendências temporais:\n",
            "            quantidade  valor_total\n",
            "data                               \n",
            "2024-04-01        2616       107273\n",
            "2024-04-02        3274       141676\n",
            "2024-04-03        4965       219782\n",
            "2024-04-04        5121       229643\n",
            "2024-04-05        3180       139784\n",
            "2024-04-06        4197       203787\n",
            "2024-04-07        4419       161711\n",
            "2024-04-08        3778       162280\n",
            "2024-04-09        4259       173796\n",
            "2024-04-10        4388       191264\n",
            "2024-04-11        4706       187365\n",
            "2024-04-12        3584       138249\n",
            "2024-04-13        4793       210016\n",
            "2024-04-14        4213       167147\n",
            "2024-04-15        4062       172337\n",
            "2024-04-16        3223       163204\n",
            "2024-04-17        5262       211548\n",
            "2024-04-18        3608       164171\n",
            "2024-04-19        4709       221289\n",
            "2024-04-20        3940       158465\n",
            "2024-04-21        4262       198634\n",
            "2024-04-22        3078       182508\n",
            "2024-04-23        2154       110809\n",
            "2024-04-24        4435       200455\n",
            "2024-04-25        3868       195850\n",
            "2024-04-26        4437       205762\n",
            "2024-04-27        4026       197545\n",
            "2024-04-28        4247       179182\n",
            "2024-04-29        4520       201367\n",
            "2024-04-30        5427       240056\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Analise de desempenho de produtos:\n",
            "nome\n",
            "produto 1      11389\n",
            "produto 10     16630\n",
            "produto 100     9992\n",
            "produto 101    19933\n",
            "produto 102     8863\n",
            "               ...  \n",
            "produto 93     10708\n",
            "produto 94     14144\n",
            "produto 96     15123\n",
            "produto 97     40728\n",
            "produto 99      7028\n",
            "Name: valor_total, Length: 488, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "DATA LAKE"
      ],
      "metadata": {
        "id": "vZ6Peswib36h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "\n",
        "#\n",
        "if not os.path.exists('data_lake'):\n",
        "  os.makedirs('data_lake')\n",
        "\n",
        "  #\n",
        "  num_files = 10\n",
        "  num_rows_per_file=1000\n",
        "\n",
        "  #\n",
        "  dfs = []\n",
        "\n",
        "  #\n",
        "  for i in range(num_files):\n",
        "    #\n",
        "    data = {\n",
        "        'coluna1': np.random.randin(0, 100, num_rows_per_file),\n",
        "        'coluna2': np.random.randin(num_rows_per_file),\n",
        "        'coluna3': np.random.randin('A', 'B', 'C', num_rows_per_file) }\n",
        "\n",
        "        #\n",
        "        df = pd.dataframe(data)\n",
        "\n",
        "\n",
        "        #\n",
        "        file_name = f'data_lake/dados_{i+1}.csv'\n",
        "        df.to_csv(file_name, index=False)\n",
        "\n",
        "        #\n",
        "        dfs.append((file_name, df))\n",
        "\n",
        "        print(\"Dados do Data Lake gerados com sucesso!\")\n",
        "\n",
        "        #\n",
        "        for file_name, df in dfs:\n",
        "          print(f\"\\nDados do arquivo: {file_name}\\n\")\n",
        "          print(df.head())\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "DST_DiBf0lMZ",
        "outputId": "0bc0011f-f427-4c4f-f3bf-018d9e67ecaa"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unexpected indent (<ipython-input-11-c9f3e3a9c941>, line 26)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-11-c9f3e3a9c941>\"\u001b[0;36m, line \u001b[0;32m26\u001b[0m\n\u001b[0;31m    df = pd.dataframe(data)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import panda as pd\n",
        "import numpy as np\n",
        "import os\n",
        "from sqlalchemy import create_engine\n",
        "\n",
        "# verifica se o diretório 'data_lake' já existe. Se o diretório 'data_lake' não existir,\n",
        "# ele cria o diretório 'data_lake' usando a função os.makedirs().\n",
        "if not os.path.exists('data_lake'):\n",
        "  os.makedirs('data_lake')\n",
        "\n",
        "  #declara duas variáveis: num_files com o valor 10 e num_rows_per_file com o valor 1000.\n",
        "  num_files = 10\n",
        "  num_rows_per_file = 1000\n",
        "\n",
        "  #cria uma lista vazia\n",
        "  dfs = []\n",
        "\n",
        "  #cria um loop que irá iterar sobre um número específico de arquivos definido pela variável num_files\n",
        "  for i in range(num_files):\n",
        "\n",
        "    #cria um dicionário chamado 'data' com três chaves\n",
        "    data = {\n",
        "        'coluna1': np.random.randint(0, 100, num_rows_per_file),\n",
        "        'coluna2': np.random.randn(num_rows_per_file),\n",
        "        'coluna3': np.random.choice(['A', 'B', 'C'], num_rows_per_file)\n",
        "    }\n",
        "\n",
        "    #cria um novo DataFrame no pandas usando os dados fornecidos na variável data\n",
        "    df = pd.DataFrame(data)\n",
        "\n",
        "    #código cria um nome de arquivo para salvar um DataFrame em formato CSV no diretório \"data_lake\",usando variavel i para icrementar\n",
        "    #o valor começando em 1 em seguida salva o DataFrame em arquivo csv sem incluir indice\n",
        "    file_name = f'data_lake/dados_{i+1}.csv'\n",
        "    df.to_csv(file_name, index=False)\n",
        "\n",
        "    #adiciona uma tupla contendo um nome de arquivo e um DataFrame a uma lista chamada dfs\n",
        "    dfs.append(df)\n",
        "\n",
        "    print(\"Dados do Data Lake gerados com sucessos!\")\n",
        "\n",
        "    #\n",
        "    #\n",
        "    conn_string= 'sqlite://data_lake.db'\n",
        "\n",
        "    #\n",
        "    engine = create_engine(conn_string)\n",
        "\n",
        "    #\n",
        "    for i, df in enumerate(dfs, 1):\n",
        "      table_name = f'dados_{i}'\n",
        "      df.to_sql(table_name, engine, index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "XdjCDMxpHEui",
        "outputId": "588ca377-8363-4aba-e524-65fa759449c1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'panda'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-bc4621c158ba>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpanda\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msqlalchemy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcreate_engine\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'panda'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "HC52eb8uqoW0"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sqlalchemy import create_engine\n",
        "\n",
        "#Cria String de conexão (conn) com o banco de dados SQLite.\n",
        "conn_string = 'sqlite:///data_lake.db'\n",
        "engine = create_engine(conn_string)\n",
        "\n",
        "#Esta nomeando a tabela como dados_1 e lê os dados da tabela do banco de dados e carrega em DataFrame.\n",
        "table_name = 'dados_1'\n",
        "df = pd.read_sql_table(table_name, engine)\n",
        "\n",
        "#Exibe primeiras linhas do Data Frame\n",
        "print(\"Primeiras linhas do Data Frame:\")\n",
        "print(df.head())\n",
        "\n",
        "#Exibe informações sobre o DataFrame\n",
        "print(\"\\nInformações sobre o Data Frame:\")\n",
        "print(df.info())\n",
        "\n",
        "#Exibe um resumo estatístico do DataFrame\n",
        "print(\"\\n Resumo estatístico do Data Frame:\")\n",
        "print(df.describe())\n",
        "\n",
        "#Cria e exibe o gráfico de dispersão entre as colunas 'coluna1' e 'coluna2'.\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x='coluna1', y='coluna2', data=df)\n",
        "plt.title('Grafico de Dispersão entre coluna1 e coluna2')\n",
        "plt.xlabel('coluna1')\n",
        "plt.ylabel('coluna2')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "#Cria e exibe o histograma da coluna 'coluna1'.\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.histplot(df['coluna1'], bins=20, kde=True)\n",
        "plt.title('Histograma da coluna1')\n",
        "plt.xlabel('coluna1')\n",
        "plt.ylabel('Frequência')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "#Cria e exibe o boxplot da coluna 'coluna3' em relação à coluna 'coluna1'.\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(x='coluna3', y='coluna1', data=df)\n",
        "plt.title('Boxplot da coluna3 em relação à coluna1')\n",
        "plt.xlabel('coluna3')\n",
        "plt.ylabel('coluna1')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "O0WH8I7UtWty",
        "outputId": "5f3ab5e9-f4a3-4ba2-d985-fda8d3278253"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Table dados_1 not found",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-57c8cd8c4116>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m#Esta nomeando a tabela como dados_1 e lê os dados da tabela do banco de dados e carrega em DataFrame.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mtable_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'dados_1'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_sql_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtable_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m#Exibe primeiras linhas do Data Frame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mread_sql_table\u001b[0;34m(table_name, con, schema, index_col, coerce_float, parse_dates, columns, chunksize, dtype_backend)\u001b[0m\n\u001b[1;32m    336\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mpandasSQL_builder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneed_transaction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpandas_sql\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mpandas_sql\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtable_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 338\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Table {table_name} not found\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    339\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m         table = pandas_sql.read_table(\n",
            "\u001b[0;31mValueError\u001b[0m: Table dados_1 not found"
          ]
        }
      ]
    }
  ]
}